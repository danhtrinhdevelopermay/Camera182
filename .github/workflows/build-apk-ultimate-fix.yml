name: Build APK - Ultimate Fix

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 11 (NOT Java 17)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Setup Flutter 3.19.6
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.6'
        channel: 'stable'
        
    - name: Verify Java Version
      run: |
        echo "=== Java Environment ==="
        java -version
        echo "JAVA_HOME: $JAVA_HOME"
        
    - name: Complete Gradle Cache Cleanup
      run: |
        echo "=== Cleaning All Gradle Cache ==="
        rm -rf ~/.gradle
        rm -rf ~/.android
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends android-sdk
        
    - name: Rebuild Complete Android Configuration
      run: |
        cd ios_camera_flutter_app
        
        echo "=== COMPLETE Android Configuration Rebuild ==="
        
        # Remove ALL build artifacts
        rm -rf android/build
        rm -rf android/.gradle  
        rm -rf android/app/build
        rm -rf android/gradle
        rm -rf build
        rm -rf .dart_tool
        
        # Create gradle wrapper directory and properties
        mkdir -p android/gradle/wrapper
        
        # Create gradle-wrapper.properties with 7.5
        cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-all.zip
        EOF
        
        # Create gradle-wrapper.jar (download)
        curl -L -o android/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v7.5.0/gradle/wrapper/gradle-wrapper.jar
        
        # Create gradlew script
        cat > android/gradlew << 'EOF'
        #!/usr/bin/env sh

        ##############################################################################
        ##
        ##  Gradle start up script for UN*X
        ##
        ##############################################################################

        # Attempt to set APP_HOME
        # Resolve links: $0 may be a link
        PRG="$0"
        # Need this for relative symlinks.
        while [ -h "$PRG" ] ; do
            ls=`ls -ld "$PRG"`
            link=`expr "$ls" : '.*-> \(.*\)$'`
            if expr "$link" : '/.*' > /dev/null; then
                PRG="$link"
            else
                PRG=`dirname "$PRG"`"/$link"
            fi
        done
        SAVED="`pwd`"
        cd "`dirname \"$PRG\"`/" >/dev/null
        APP_HOME="`pwd -P`"
        cd "$SAVED" >/dev/null

        APP_NAME="Gradle"
        APP_BASE_NAME=`basename "$0"`

        # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
        DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

        # Use the maximum available, or set MAX_FD != -1 to use that value.
        MAX_FD="maximum"

        warn () {
            echo "$*"
        }

        die () {
            echo
            echo "$*"
            echo
            exit 1
        }

        # OS specific support (must be 'true' or 'false').
        cygwin=false
        msys=false
        darwin=false
        nonstop=false
        case "`uname`" in
          CYGWIN* )
            cygwin=true
            ;;
          Darwin* )
            darwin=true
            ;;
          MINGW* )
            msys=true
            ;;
          NONSTOP* )
            nonstop=true
            ;;
        esac

        CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

        # Determine the Java command to use to start the JVM.
        if [ -n "$JAVA_HOME" ] ; then
            if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                # IBM's JDK on AIX uses strange locations for the executables
                JAVACMD="$JAVA_HOME/jre/sh/java"
            else
                JAVACMD="$JAVA_HOME/bin/java"
            fi
            if [ ! -x "$JAVACMD" ] ; then
                die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
            fi
        else
            JAVACMD="java"
            which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
        fi

        # Increase the maximum file descriptors if we can.
        if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
            MAX_FD_LIMIT=`ulimit -H -n`
            if [ $? -eq 0 ] ; then
                if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
                    MAX_FD="$MAX_FD_LIMIT"
                fi
                ulimit -n $MAX_FD
                if [ $? -ne 0 ] ; then
                    warn "Could not set maximum file descriptor limit: $MAX_FD"
                fi
            else
                warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
            fi
        fi

        # For Darwin, add options to specify how the application appears in the dock
        if [ "$darwin" = "true" ]; then
            GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
        fi

        # For Cygwin or MSYS, switch paths to Windows format before running java
        if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
            APP_HOME=`cygpath --path --mixed "$APP_HOME"`
            CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
            
            JAVACMD=`cygpath --unix "$JAVACMD"`

            # We build the pattern for arguments to be converted via cygpath
            ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
            SEP=""
            for dir in $ROOTDIRSRAW ; do
                ROOTDIRS="$ROOTDIRS$SEP$dir"
                SEP="|"
            done
            OURCYGPATTERN="(^($ROOTDIRS))"
            # Add a user-defined pattern to the cygpath arguments
            if [ "$GRADLE_CYGPATTERN" != "" ] ; then
                OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
            fi
            # Now convert the arguments - kludge to limit ourselves to /bin/sh
            i=0
            for arg in "$@" ; do
                CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
                CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

                if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
                    eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
                else
                    eval `echo args$i`="\"$arg\""
                fi
                i=`expr $i + 1`
            done
            case $i in
                0) set -- ;;
                1) set -- "$args0" ;;
                2) set -- "$args0" "$args1" ;;
                3) set -- "$args0" "$args1" "$args2" ;;
                4) set -- "$args0" "$args1" "$args2" "$args3" ;;
                5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
                6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
                7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
                8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
                9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
            esac
        fi

        # Escape application args
        save () {
            for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
            echo " "
        }
        APP_ARGS=`save "$@"`

        # Collect all arguments for the java command
        eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

        exec "$JAVACMD" "$@"
        EOF
        
        chmod +x android/gradlew
        
        # FORCE create root build.gradle with EXACT buildscript
        cat > android/build.gradle << 'EOF'
        buildscript {
            ext.kotlin_version = '1.7.10'
            repositories {
                google()
                mavenCentral()
            }

            dependencies {
                classpath 'com.android.tools.build:gradle:7.3.0'
                classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
            }
        }

        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }

        rootProject.buildDir = '../build'
        subprojects {
            project.buildDir = "${rootProject.buildDir}/${project.name}"
        }
        subprojects {
            project.evaluationDependsOn(':app')
        }

        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF
        
        # FORCE create app build.gradle
        cat > android/app/build.gradle << 'EOF'
        def localProperties = new Properties()
        def localPropertiesFile = rootProject.file('local.properties')
        if (localPropertiesFile.exists()) {
            localPropertiesFile.withReader('UTF-8') { reader ->
                localProperties.load(reader)
            }
        }

        def flutterRoot = localProperties.getProperty('flutter.sdk')
        if (flutterRoot == null) {
            throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
        }

        def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
        if (flutterVersionCode == null) {
            flutterVersionCode = '1'
        }

        def flutterVersionName = localProperties.getProperty('flutter.versionName')
        if (flutterVersionName == null) {
            flutterVersionName = '1.0'
        }

        apply plugin: 'com.android.application'
        apply plugin: 'kotlin-android'
        apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

        android {
            compileSdkVersion flutter.compileSdkVersion
            ndkVersion flutter.ndkVersion

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            kotlinOptions {
                jvmTarget = '1.8'
            }

            sourceSets {
                main.java.srcDirs += 'src/main/kotlin'
            }

            defaultConfig {
                applicationId "com.example.ios_camera_flutter_app"
                minSdkVersion flutter.minSdkVersion
                targetSdkVersion flutter.targetSdkVersion
                versionCode flutterVersionCode.toInteger()
                versionName flutterVersionName
            }

            buildTypes {
                release {
                    signingConfig signingConfigs.debug
                }
            }
        }

        flutter {
            source '../..'
        }

        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        }
        EOF
        
        # Force create settings.gradle
        cat > android/settings.gradle << 'EOF'
        include ':app'

        def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
        def properties = new Properties()

        assert localPropertiesFile.exists()
        localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }

        def flutterSdkPath = properties.getProperty("flutter.sdk")
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
        apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
        EOF
        
        # Force gradle.properties
        cat > android/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx1536M
        android.useAndroidX=true
        android.enableJetifier=true
        EOF
        
        # Force MainActivity
        mkdir -p android/app/src/main/kotlin/com/example/ios_camera_flutter_app
        cat > android/app/src/main/kotlin/com/example/ios_camera_flutter_app/MainActivity.kt << 'EOF'
        package com.example.ios_camera_flutter_app

        import io.flutter.embedding.android.FlutterActivity

        class MainActivity : FlutterActivity()
        EOF
        
        echo "=== VERIFICATION of Ultimate Configuration ==="
        echo "Java Version in Environment:"
        echo "JAVA_HOME: $JAVA_HOME"
        java -version
        echo ""
        echo "Root build.gradle buildscript:"
        head -12 android/build.gradle
        echo ""
        echo "App build.gradle plugins:"
        sed -n '24,26p' android/app/build.gradle
        echo ""
        echo "Gradle wrapper properties:"
        cat android/gradle/wrapper/gradle-wrapper.properties
        echo ""
        echo "MainActivity package:"
        head -1 android/app/src/main/kotlin/com/example/ios_camera_flutter_app/MainActivity.kt
        echo ""
        echo "✅ ULTIMATE Configuration Complete!"
        
    - name: Flutter Clean and Get Dependencies
      run: |
        cd ios_camera_flutter_app
        flutter clean
        flutter pub get
        
    - name: Build APK - Ultimate Configuration
      run: |
        cd ios_camera_flutter_app
        echo "=== Building APK with Ultimate Fix ==="
        echo "Final JAVA_HOME check: $JAVA_HOME"
        java -version
        flutter build apk --release --verbose
        
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: camera-app-ultimate-release
        path: ios_camera_flutter_app/build/app/outputs/flutter-apk/app-release.apk
        retention-days: 30
        
    - name: Final Success Status
      if: always()
      run: |
        cd ios_camera_flutter_app
        echo "=== ULTIMATE BUILD RESULT ==="
        if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
          echo "🎉 SUCCESS: APK Build Completed with Ultimate Fix!"
          echo "📱 APK Path: $(pwd)/build/app/outputs/flutter-apk/app-release.apk"
          echo "📊 APK Size: $(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)"
          echo ""
          echo "🚀 Camera App with Full Permissions is Ready!"
          echo "✅ Java 11 + Gradle 7.5 + AGP 7.3.0 + AndroidX + Embedding v2"
        else
          echo "❌ BUILD FAILED"
          echo "Checking for any APK outputs:"
          find build -name "*.apk" 2>/dev/null || echo "No APK files found"
          echo ""
          echo "Last Gradle error check:"
          find android -name "*.log" -exec tail -5 {} \; 2>/dev/null || echo "No gradle logs found"
        fi